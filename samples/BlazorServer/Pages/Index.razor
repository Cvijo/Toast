@page "/"
@using System.Diagnostics;
@using Blazored.Toast.Configuration;
@inject IToastService toastService
@inject NavigationManager NavigationManager

<h1>Blazored Toasts</h1>
<div>
    <button class="btn btn-info" @onclick="@(() => toastService.ShowInfo("I'm an INFO message"))">Info Toast</button>
    <button class="btn btn-success" @onclick="@(() => toastService.ShowSuccess("I'm a SUCCESS message with a custom heading"))">Success Toast</button>
    <button class="btn btn-warning" @onclick="@(() => toastService.ShowWarning("I'm a WARNING message"))">Warning Toast</button>
    <button class="btn btn-danger" @onclick="@(() => toastService.ShowError("I'm an ERROR message"))">Error Toast</button>
    <button class="btn btn-info" @onclick="@OnShowHtml">Info Toast with HTML</button>
    <button class="btn btn-info" @onclick="@(() => toastService.ShowInfo("Click to refresh the page", options => options.OnClick = () => NavigationManager.NavigateTo("/", true)))">
        Info Toast with custom action on click
    </button>
</div>
<div class="mt-2">
    <button class="btn btn-info" @onclick="@(() => toastService.ShowInfo("When you hover over me, I will pause the timeout progress and resume it once you move away", settings => {settings.Timeout = 15; settings.PauseProgressOnHover = true; }))">Pause progress on hover</button>
    <button class="btn btn-success" @onclick="@(() => toastService.ShowSuccess("When you hover over me, I will stop the timeout progress and close after an extended timeout of 1 second", settings => {settings.Timeout = 15; settings.PauseProgressOnHover = true; settings.ExtendedTimeout = 1;}))">Pause progress on hover with extended timeout</button>
</div>
<hr />


<h1>Blazored Toasts - Custom Component</h1>

<button class="btn btn-primary" @onclick="@(() => toastService.ShowToast<MyToastComponent>(settings => { settings.Timeout = 5; settings.ShowProgressBar = false; }))">Custom Toast</button>
<button class="btn btn-secondary" @onclick="@(() => toastService.ShowToast<MyToastComponent>(_toastParameters, settings => { settings.Timeout = 5; settings.ShowProgressBar = false; }))">Custom Toast with parameters</button>
<hr />


<h1>Blazored Toasts - Remove Toasts</h1>

<button class="btn btn-primary" @onclick="ClearAll">Clear All Toasts</button>
<button class="btn btn-warning" @onclick="ClearWarnings">Clear Warning Toasts</button>
<button class="btn btn-info" @onclick="ClearInfos">Clear Info Toasts</button>
<button class="btn btn-secondary" @onclick="ClearCustom">Clear Custom Toasts</button>
<hr />

<h1>Blazored Toasts - Remove queued Toasts</h1>

<button class="btn btn-primary" @onclick="ClearQueue">Clear all queued Toasts</button>
<button class="btn btn-warning" @onclick="ClearQueueWarnings">Clear queued Warning Toasts</button>
<button class="btn btn-info" @onclick="ClearQueueInfos">Clear queued Info Toasts</button>

<hr />
<button class="btn btn-primary" @onclick="AddToast" >Add toast</button>
<button class="btn btn-primary" @onclick="ClearToasts">Clear toast</button>

@if(toastList.Any())
{
    <ul>
        @foreach( var toast in toastList)
    {
            <li>
                @toast.Id
                <button class="btn btn-warning btn-sm" @onclick="@(() => CloseToast(toast.Id))">Close</button>
                <button class="btn btn-warning btn-sm" @onclick="@(() => CloseInstanceToast(toast))">Close</button>
            </li>
        
    }
    </ul>
}

@code
{
    private ToastParameters _toastParameters;


    private void ttt(ToastLevel level, RenderFragment message, Action<ToastSettings>? toastSettings)
    {
        Debug.WriteLine(toastSettings);
        InvokeAsync(() =>
        {
            Debug.WriteLine(message);
                StateHasChanged();
        });
    }

    protected override void OnInitialized()
    {
        toastService.OnShow += ttt;
        _toastParameters = new ToastParameters();
        _toastParameters.Add(nameof(MyToastComponent.Title), "I'm a custom toast component with parameters");
        _toastParameters.Add(nameof(MyToastComponent.ToastParam), "I'm a parameter");
    }

    private void OnShowHtml()
    {
        RenderFragment message =@<text>I'm an <em>INFO</em> message with some <strong>bold</strong> text</text>
    ;
        toastService.ShowToast(ToastLevel.Info, message);
    }


    private List<ToastInstance> toastList {get;set;} = new();
    private async Task AddToast()
    {
        

        var instance = toastService.ShowToastWithInstance(ToastLevel.Warning, builder => builder.AddContent(0, "aaaa  asd asd asd"), settings => settings.Timeout = 10);
        toastList.Add(instance);
        await InvokeAsync(StateHasChanged);
        

    }
    private void ClearToasts()
    {
        toastList.Clear();
    }
    private void CloseToast(Guid guid)
    {
        toastService.ClearToast(guid);
        toastList.RemoveAll(x=> x.Id ==guid);
    }


    private void CloseInstanceToast(ToastInstance instance)
    {
        instance.Close();
        toastList.Remove(instance);
    }

    private void ClearAll()
        => toastService.ClearAll();

    private void ClearWarnings()
        => toastService.ClearToasts(ToastLevel.Warning);

    private void ClearInfos()
        => toastService.ClearInfoToasts();

    private void ClearCustom()
        => toastService.ClearCustomToasts();

    private void ClearQueue()
        => toastService.ClearQueue();

    private void ClearQueueWarnings()
        => toastService.ClearQueueToasts(ToastLevel.Warning);

    private void ClearQueueInfos()
        => toastService.ClearQueueInfoToasts();
}
